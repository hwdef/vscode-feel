demo :>  
{ 
    <: 
    { 
        System;
        System:Linq;
        System:Collections:Generic;
        System:Text;
        System:Threading:Tasks;
        System:ComponentModel:DataAnnotations:Schema;
        System:ComponentModel:DataAnnotations;
        .. Other.Other;
        .. demo;
    }; 

    $ 
    {
        Console.WriteLine.("main function");
        i : "128.687"; 
        i += ".890"; 
        b : 12;  
        b = + - b;
        b += OtherData;
        c : false; 
        c = ~~c;
        Console.WriteLine.(b.ToString.().ToString.());

        TestSwitch.();
        TestIf.();
        TestArray.();
        TestDictionary.();
        TestLoop.();
        (x, _) : TestFunc.("testcall");
        TestCheck.();
        TestTypeConvert.();
        Console.WriteLine.(TestDefer.().str);
        TestLambda.();
        _ = ~$ TestAsync.();

        p : #App.();

        _ = p.class.c.(1);
        TestInterface.(p.class);

        p.TestFuncTemplate<i32,str>.(1, "2").TestPackage.();
        
        Console.ReadKey.();
    };

    demo: #
    {
        staticX : 0;
        staticY : "hello";
        constZ := 1024;
        staticG : ^i64;
        staticP : ^str
        ~get { -> (staticY); }
        ~set { staticY = value; };

        TestTypeConvert : $()~()
        {
            x : #App.();
            y : x.!Program;
            z : !f32(12.34);
            Console.WriteLine.( y.?Program );
            Console.WriteLine.( y.!Program.Running );
            Console.WriteLine.( #Program );
        };

        TestSwitch : $()~()
        {
            x : 3;
            ? x ~ 1
            {
                Console.WriteLine.(1);
            }
            ~ 2
            {
                Console.WriteLine.(2);
            }
            ~ 3
            {
                Console.WriteLine.(3);
            }
            ~ _
            {
                Console.WriteLine.("default");
            };
        };

        TestIf : $()~()
        {
            x : 5;
            ? x ?= 2
            {
                Console.WriteLine.(2);
            }
            ? x ?= 3
            {
                Console.WriteLine.(3);
            }
            ~?
            {
                Console.WriteLine.("else");
            };
        };

        TestArray : $()~()
        {
            arrSingle : [1];
            arrNumber : [1,2,5,6,8,4];
            take : arrNumber.[0];
            take = #InPackageArray.().Arr.[2];
            arrObj : ["123", 432, #App.()];
            arrArr : [[1,1,1],[1,1,1]];
            arrEmpty : #[]i32.();
            @ arrNumber ~ item 
            {
                Console.WriteLine.(item);
            };
        };

        TestDictionary : $()~()
        {
            empty : #[str]i32.();
            dicSN : ["k1":1,"k2":"2"];
            Console.WriteLine.(dicSN.["k2"]);
        };

        TestCheck : $()~()
        {
            ! 
            {
                x : 1 * 1;
            }
            ~ err 
            {
                !~ err;
            };
        };

        TestDefer : $()~(out:Defer)
        {
            x : #Defer.();
            ~!
            {
                x.str += "defer 2";
            };
            x.str = "3";
            ~!
            {
                x.str += "defer 4";
            };
            x.str += "5";
            @ [0~3] ~ index
            {
                ~!
                {
                    x.str += "defer 6";
                };
                x.str += "7";
            };
            -> (x);
        };

        TestLoop : $()~()
        {
            Console.WriteLine.(" 0 to 10");
            @ [0 ~ 10] ~ i
            {
                Console.Write.(i);
                Console.Write.(", ");
            };
            Console.WriteLine.("");
            Console.WriteLine.(" 0 to 8 step 2");
            @ [0 ~ 8; 2] ~ i
            {
                Console.Write.(i);
                Console.Write.(", ");
            };
            Console.WriteLine.("");
            Console.WriteLine.(" 8 to 2 step -2");
            @ [8 ~ 0; -2] ~ i
            {
                Console.Write.(i);
                Console.Write.(", ");
            };
            Console.WriteLine.("");
            @
            {
                ~@;
            };
        };

        TestFunc : $(str:str)~(out1:str,out2:i32)
        {
            str = str + "test";
            i : 1+1*3*9/8;
            out2 : i + 5 +(i +8);
            // func in func
            InFunc : $()~()
            {
                -> ();
            };
            InFunc.();

            -> (str, i);
        };

        TestAsync : ~$()~(x:i32,y:i32,z:str)
        {
            ~$ Task.Delay.(5000);
            Async1 : ~$()~()
            {
                ~$ Task.Delay.(5000);
            };
            -> (1, 2, "123");
        };

        TestLambda : $()~()
        {
            Test1 : $(fn: $(i1:i32, i2:i32)~(o1:i32, o2:i32) )~()
            {
                (o1, o2) : fn.(1, 2);
            };
            Test1.($i1,i2->(i1,i2));

            Test2 : $(fn: $()~(o1:i32) )~()
            {
                o1 : fn.();
            };
            Test2.($->1);

            Test3 : $(fn: $(i1:i32)~() )~()
            {
                fn.(1);
            };
            Test3.( ~$(i1:i32)~()
            {
                ~$ Task.Delay.(5000);
                Console.WriteLine.(i1);
            });
        };

        TestLinq : $()~()
        {
            numbers :  [0, 1, 2, 3, 4, 5, 6];
            arr : `from num in numbers
                    where (num % 2) ?= 0
                    orderby num descending
                    select num`;
        };

        TestInterface : $(in:&class)~() {};
    };

    InPackageArray : #()
    {
        Arr : ^[]i32;

        ~#
        {
            Arr = [1,2,3,4,5,6,7];
        };
    };

    Defer : #()
    {
        str : ^str;
    };

    App : #()
    { 
        ~# Program;

        i : 555;
        d : 128.687;  
        b : "12";  
        c : true; 
        arr : [1,1,1,1];
        _PriName : " program ";

        TestPackage : $()~()
        {
            item : #Program.(){
                Name= "new program",
                Running= true
            };
            item2 : #
            {
                Name: "new program",
                Running: true
            };
            item3 : #[]i32.()[1,2,3,4,5];
            item4 : #[str]i32.()["1":1,"2":2,"3":3];
        };

        _b : 5;

        ~& class
        {
            
            b : ^i32 
            ~get{ -> (_b); }
            ~set{ _b = value; };

            c : $(x:i32)~(y:i32)
            {
                -> (x + ..class.b);
            };

            d : ~$()~(x:i32)
            {
                ~$ Task.Delay.(5000);
                -> (3);
            };

            e : ~$()~()
            {
                ~$ Task.Delay.(5000);
            };

            f : ^str;
        };

        TestFuncTemplate<T1,T2> : $(data1:T1, data2:T2)~(data:App)
        {
            -> (..);
        };
    }; 

    Result : #(str:str) 
    {
        data : "";

        ~#
        {
            ..data = str;
        };
    };

    TestPackageTemplate<T> : #()
    {
        data : #(T);
    };

    TestProtocolTemplate<T> : &
    {
        Test<T> : $(in:T)~(){};
    };

    TestImplementTemplate : #()
    {
        ~& TestProtocolTemplate<TestImplementTemplate>
        {
            Test<TestImplementTemplate> : $(in:TestImplementTemplate)~(){};
        };
    };

    Program : #()
    {
        Name : ^str;
        Running : ^bool;

        Property : ^str
        ~get { -> (Name); }
        ~set { Name = value; };
    };

    class : &
    {
        b : ^i32;
        c : $(x:i32)~(y:i32){};
        d : ~$()~(y:i32){};
        e : ~$()~(){};
        f : ^str;
    };

    \\ Table.("test")
    TestAnnotation : #()
    {
        \*Key, Column.("id")*\
        Id : ^str;
        \\ Column.("nick_name")
        NickName : ^str; 
        \\ Column.("profile")
        Profile : ^str;
    };

    Code: #[Ok, Err = -1];
};

Other :> 
{
    <:
    {
        System;
    };

    Other: #
    {
        OtherData := 256; 
    };
};

ImportDemo :> 
{
    <:
    {
        System;
        Other;
    };

    Package : #()
    {
        ~#
        {
            x : ~:Other.OtherData;
        };
    };
};