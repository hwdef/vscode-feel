{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "k",
	"patterns": [
		{
			"include": "#literal"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#expression"
		},
		{
			"include": "#comment"
		}
	],
	"repository": {
		"literal": {
			"patterns": [
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#string-literal"
				},
				{
					"include": "#nil-literal"
				}
			]
		},
		"expression": {
			"patterns":[
				{
					"include": "#expression-operators"
				}
			]
		},
		"boolean-literal": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.k",
					"match": "(?<!\\.)\\btrue\\b"
				},
				{
					"name": "constant.language.boolean.false.k",
					"match": "(?<!\\.)\\bfalse\\b"
				}
			]
		},
		"numeric-literal": {
			"patterns": [
				{
					"name": "constant.numeric.hex.k",
					"match": "\\b0(x|X)[0-9a-fA-F_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
				},
				{
					"name": "constant.numeric.octal.k",
					"match": "\\b0(o|O)[0-8_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
				},
				{
					"name": "constant.numeric.binary.k",
					"match": "\\b0(b|B)[01_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
				},
				{
					"name": "constant.numeric.decimal.k",
					"match": "\\b([0-9_]+)?\\.[0-9_]+((e|E)[0-9]+)?(F|f|D|d|M|m)?\\b"
				},
				{
					"name": "constant.numeric.decimal.k",
					"match": "\\b[0-9_]+(e|E)[0-9_]+(F|f|D|d|M|m)?\\b"
				},
				{
					"name": "constant.numeric.decimal.k",
					"match": "\\b[0-9_]+(F|f|D|d|M|m)\\b"
				},
				{
					"name": "constant.numeric.decimal.k",
					"match": "\\b[0-9_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
				}
			]
		},
		"string-literal": {
			"patterns" :[
				{
					"name": "string.quoted.raw.k",
					"begin": "(\"\"\")",
					"end": "(\"\"\")",
					"patterns": [
						{
							"name": "meta.embedded.raw.k",
							"begin": "\\$\\{",
							"end": "\\}",
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						{
							"name": "constant.character.escape.k",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.double.k",
					"begin": "(\")",
					"end": "(\")",
					"patterns": [
						{
							"name": "meta.embedded.line.k",
							"begin": "\\$\\{",
							"end": "\\}",
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						{
							"name": "constant.character.escape.k",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.single.k",
					"begin": "(')",
					"end": "(')",
					"patterns": [
						{
							"name": "constant.character.escape.k",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.grave.single.k",
					"begin": "`",
					"end": "`"
				}
			]
		},
		"nil-literal":{
			"patterns": [ 
				{
					"name": "constant.language.nil.k",
					"match": "(?<!\\.)\\bnil\\b"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.k",
					"match": "(\\?|\\~\\@|\\@|\\!|\\$|\\-\\>\\>|\\-\\>|\\<\\<\\-|\\<\\-|\\<\\~|\\~\\>)"
				}
			]
		},
		"expression-operators": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.compound.k",
					"match": "(\\*=|/=|%=|\\+=|-=|\\*\\*=|//=|%%=)"
				},
				{
					"name": "keyword.operator.comparison.k",
					"match": "(==|><)"
				},
				{
					"name": "keyword.operator.relational.k",
					"match": "(<=|>=|<|>)"
				},
				{
					"name": "keyword.operator.logical.k",
					"match": "(\\~|&|\\|)"
				},
				{
					"name": "keyword.operator.bitwise.k",
					"match": "<<|>>|~~|\\^\\^|&&|\\|\\|"
				},
				{
					"name": "keyword.operator.assignment.k",
					"match": "(\\=|\\:\\=)"
				},
				{
					"name": "keyword.operator.arithmetic.k",
					"match": "%|\\*|/|-|\\+"
				},
				{
					"name": "keyword.operator.null-coalescing.k",
					"match": "\\?\\?"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.k",
					"begin": "#=",
					"end": "=#"
				},
				{
					"name": "comment.line.k",
					"begin": "#",
					"end": "$"
				}
			]
		}
	},
	"scopeName": "source.k"
}