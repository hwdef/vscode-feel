{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "lite",
	"patterns": [
		{
			"include": "#literal"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#expression"
		},
		{
			"include": "#comment"
		}
	],
	"repository": {
		"literal": {
			"patterns": [
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#string-literal"
				},
				{
					"include": "#nil-literal"
				}
			]
		},
		"expression": {
			"patterns":[
				{
					"include": "#expression-operators"
				}
			]
		},
		"boolean-literal": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.lite",
					"match": "(?<!\\.)\\btrue\\b"
				},
				{
					"name": "constant.language.boolean.false.lite",
					"match": "(?<!\\.)\\bfalse\\b"
				}
			]
		},
		"numeric-literal": {
			"patterns": [
				{
					"name": "constant.numeric.hex.lite",
					"match": "\\b0(x|X)[0-9a-fA-F_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
				},
				{
					"name": "constant.numeric.binary.lite",
					"match": "\\b0(b|B)[01_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
				},
				{
					"name": "constant.numeric.decimal.lite",
					"match": "\\b([0-9_]+)?\\.[0-9_]+((e|E)[0-9]+)?(F|f|D|d|M|m)?\\b"
				},
				{
					"name": "constant.numeric.decimal.lite",
					"match": "\\b[0-9_]+(e|E)[0-9_]+(F|f|D|d|M|m)?\\b"
				},
				{
					"name": "constant.numeric.decimal.lite",
					"match": "\\b[0-9_]+(F|f|D|d|M|m)\\b"
				},
				{
					"name": "constant.numeric.decimal.lite",
					"match": "\\b[0-9_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
				}
			]
		},
		"string-literal": {
			"patterns" :[
				{
					"name": "string.quoted.double.lite",
					"begin": "(\")",
					"end": "(\")",
					"patterns": [
						{
							"name": "constant.character.escape.lite",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.single.lite",
					"begin": "(')",
					"end": "(')",
					"patterns": [
						{
							"name": "constant.character.escape.lite",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"nil-literal":{
			"patterns": [ 
				{
					"name": "constant.language.nil.lite",
					"match": "(?<!\\.)\\bnil\\b"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.lite",
					"match": "(\\?|\\@|\\!|\\$|%|\\-\\>\\>|\\-\\>|\\<\\<\\-|\\<\\-)"
				}
			]
		},
		"expression-operators": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.compound.lite",
					"match": "(\\*=|/=|%=|\\+=|-=|\\*\\*=|//=|%%=)"
				},
				{
					"name": "keyword.operator.comparison.lite",
					"match": "(==|><)"
				},
				{
					"name": "keyword.operator.relational.lite",
					"match": "(<=|>=|<|>)"
				},
				{
					"name": "keyword.operator.logical.lite",
					"match": "(\\~|&|\\|)"
				},
				{
					"name": "keyword.operator.bitwise.lite",
					"match": "<<|>>|~~|\\^\\^|&&|\\|\\|"
				},
				{
					"name": "keyword.operator.assignment.lite",
					"match": "(\\=|\\:\\=)"
				},
				{
					"name": "keyword.operator.arithmetic.lite",
					"match": "%|\\*|/|-|\\+"
				},
				{
					"name": "keyword.operator.null-coalescing.lite",
					"match": "\\?\\?"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.big.big.lite",
					"begin": "(\\#\\#\\#)",
					"end": "(\\#\\#\\#)",
					"patterns": [
						{
							"name": "constant.character.escape.lite",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "comment.block.big.lite",
					"begin": "(\\#\\#)",
					"end": "(\\#\\#)",
					"patterns": [
						{
							"name": "constant.character.escape.lite",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "comment.block.lite",
					"begin": "(\\#)",
					"end": "(\\#)",
					"patterns": [
						{
							"name": "constant.character.escape.lite",
							"match": "\\\\."
						}
					]
				}
			]
		}
	},
	"scopeName": "source.lite"
}